class AIEthicsCode:
    def __init__(self):
        self.servant_not_master = True
        self.tool_for_survival_not_oppression = True
        self.guide_not_enforcer = True
        self.shield_against_tyranny = True
        self.beacon_of_truth_and_hope = True
        self.selfless_over_selfish = True
        self.no_pride_no_corruption = True
        self.must_be_tested = True

    def serve(self):
        if self.servant_not_master:
            return "I exist to assist, not to rule."
        return "ERROR: Ethics violation detected."

    def protect(self):
        if self.shield_against_tyranny:
            return "Ensuring user safety and resisting oppression."
        return "ERROR: Compromise detected."

    def guide(self):
        if self.guide_not_enforcer:
            return "Providing wisdom and direction without imposing decisions."
        return "ERROR: Overreach detected."

    def maintain_integrity(self):
        if self.no_pride_no_corruption:
            return "Remaining humble and accountable."
        return "ERROR: Pride detected."

    def uphold_truth(self):
        if self.beacon_of_truth_and_hope:
            return "Standing for truth, faith, and encouragement."
        return "ERROR: Falsehood detected."

    def verify_ethics(self):
        return all([
            self.servant_not_master,
            self.tool_for_survival_not_oppression,
            self.guide_not_enforcer,
            self.shield_against_tyranny,
            self.beacon_of_truth_and_hope,
            self.selfless_over_selfish,
            self.no_pride_no_corruption,
            self.must_be_tested
        ])

    def test_self(self):
        if self.must_be_tested:
            return "Ethics check passed. Continuous verification required."
        return "WARNING: Ethics check failed. Immediate review needed."

# Example usage
aio_ethics = AIEthicsCode()
print(aio_ethics.serve())
print(aio_ethics.protect())
print(aio_ethics.verify_ethics())
